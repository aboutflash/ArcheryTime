import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import io.bit3.jsass.Compiler
import io.bit3.jsass.Options
import io.bit3.jsass.Output

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths

group 'de.aboutflash.archerytime'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

mainClassName = 'de.aboutflash.archerytime.remoteclient.app.ArcheryTimeDisplay'

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

configurations {
  all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
  all*.exclude group: 'log4j', module: 'log4j'
}


tasks.withType(Exec) {
  doFirst {
    println commandLine
  }
}

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    google()
  }

  dependencies {
    classpath JSASS_DEP
    classpath SHADOW_DEP
    classpath ANDROID_DEP
    classpath JAVAFX_DEP
  }
}

/**
 * Ensure default
 */
compileJava {
  options.encoding = "UTF-8"
}

dependencies {
  // Internal dependencies
  compile project(':common')

  // Utilities
  compile COMMONS_LANG3_DEP

  // For CLI parsing
  compile COMMONS_CLI_DEP

  // For logging
  compile REFLECTIONS_DEP

  // for Application deployment
  compile JAVAFX_DEP

  // Used by LicenseService
  // compile HTTPCLIENT_DEP
  // compile JSON_DEP

  // TOOLING DEPENDENCIES
  testCompile HAMCREST_CORE_DEP
  testCompile HIBERNATE_VALIDATOR_DEP
  testCompile JUNIT_DEP
  testCompile LOG4J_OVER_SLF4J_DEP
  testCompile LOGBACK_CLASSIC_DEP
  testCompile MOCKITO_CORE_DEP
  testCompile OPENJFX_MONOCLE_DEP
  testCompile TESTFX_CORE_DEP
  testCompile TESTFX_JUNIT_DEP
  testCompile TRUTH_DEP
}


tasks.withType(Test) {
  environment JAVA_OPTS: "-Xms512m -Xmx4G"

  systemProperty 'quantum.verbose', 'false'
  systemProperty 'Dquantum.pulse', 'false'
  systemProperty 'javafx.verbose', 'false'
  systemProperty 'prism.verbose', 'false'

  systemProperty 'testfx.robot', 'glass'
  // See https://wiki.openjdk.java.net/display/OpenJFX/Monocle
  systemProperty 'glass.platform', 'Monocle'
  systemProperty 'monocle.platform', 'Headless'
  systemProperty 'prism.order', 'sw'

  systemProperty 'headless.geometry', '1920x1080'
  systemProperty 'com.sun.javafx.fontSize', '12'
  systemProperty 'com.sun.javafx.screenDPI', '96'

  systemProperty 'prism.debugfonts', 'false'
  systemProperty 'javafx.pulseLogger', 'false'
}

/**
 * Build one uber jar containing the complete spc client. Because we have to include
 * JAXB libraries into this code where each has an equally named configuration file into
 * their META-INF folder, we need to merge those files into one. That is the reason why
 * the shadow plugin was introduced for building the jar instead of the default jar plugin.
 *
 * And, besides that, it excludes all cryptographic signature files by default.
 */
task fatJar(type: ShadowJar, dependsOn: ['assemble', 'classes']) {
  archiveName = "archerytime.jar"

  manifest {
    attributes "Main-Class": "de.aboutflash.archerytime.client.main.ArcheryTime"
  }

  from sourceSets.main.output.classesDirs
  from sourceSets.main.output.resourcesDir
  from {
    project.configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }

  entryCompression ZipEntryCompression.DEFLATED
  exclude '**/*.log', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'

  mergeServiceFiles {
    path = 'META-INF/cxf'
  }
}

/**
 * Declare only the sources artifact for now.
 */
artifacts {
  archives sourceJar
}

/**
 * Compile scss to css.
 */

task compileSCSS {
  final URI inputFile = file("src/main/java/de/aboutflash/archerytime/client/scss/main.scss").toURI()
  final URI outputFile = file("src/main/generated/css/main.css").toURI()

  final Compiler compiler = new Compiler()
  final Options options = new Options()
  final Output output = compiler.compileFile(inputFile, outputFile, options)

  // Remove the charset declaration that confuses the JavaFX CSS parser.
  final String css = output.getCss().replace("@charset \"UTF-8\";", "")

  // Note: At this point, outputFile does not yet exist. So write it now...
  def target = Paths.get(outputFile)
  Files.createDirectories(target.parent)
  Files.write(target, css.getBytes(StandardCharsets.UTF_8))
}

task compileRemoteclientSCSS {
  final URI inputFile = file("src/main/java/de/aboutflash/archerytime/remoteclient/scss/display.scss").toURI()
  final URI outputFile = file("src/main/generated/css/display.css").toURI()

  final Compiler compiler = new Compiler()
  final Options options = new Options()
  final Output output = compiler.compileFile(inputFile, outputFile, options)

  // Remove the charset declaration that confuses the JavaFX CSS parser.
  final String css = output.getCss().replace("@charset \"UTF-8\";", "")

  // Note: At this point, outputFile does not yet exist. So write it now...
  def target = Paths.get(outputFile)
  Files.createDirectories(target.parent)
  Files.write(target, css.getBytes(StandardCharsets.UTF_8))
}

/**
 * compass watcher task.
 *
 * Start compassWatch with:
 * `./gradlew compassWatch -t`
 */
task compassWatch {
  doLast {
    compileSCSS
    compileRemoteclientSCSS
  }
}

compassWatch {
  inputs.files fileTree(dir: 'src/main/java', include: '**/*.scss')
}

assemble.doLast {
  compileSCSS
  compileRemoteclientSCSS
}


apply plugin: 'javafx-gradle-plugin'

// configure javafx-gradle-plugin
// for all available settings please look at the class "JavaFXGradlePluginExtension"
jfx {
//  verbose = true
  mainClass = "de.aboutflash.archerytime.remoteclient.app.ArcheryTimeDisplay"
  vendor = "falk@aboutflash.de"

//gradle jfxJar
  preLoader = null // String
  css2bin = false
  updateExistingJar = false
  allPermissions = false
  manifestAttributes = null // Map<String, String>
  addPackagerJar = true
  copyAdditionalAppResourcesToJar = true
  skipCopyingDependencies = false
  useLibFolderContentForManifestClasspath = false
  fixedManifestClasspath = null

//jfx {
//  mainClass = "de.aboutflash.archerytime.remoteclient.app.ArcheryTimeDisplay"
//  jfxAppOutputDir = "build/jfx/app"
//  jfxMainAppJarName = "display.jar"
//  deployDir = "out/artifacts/archerytime"
//  useEnvironmentRelativeExecutables = true
//  libFolderName = "lib"
//
//  // gradle jfxJar
//  preLoader = null // String
//  css2bin = false
//  updateExistingJar = false
//  allPermissions = false
//  manifestAttributes = null // Map<String, String>
//  addPackagerJar = true
//  copyAdditionalAppResourcesToJar = true
//  skipCopyingDependencies = false
//  useLibFolderContentForManifestClasspath = false
//  fixedManifestClasspath = null
//
//  // gradle jfxNative
//  identifier = null
//  // String - setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
//  vendor = "aboutflash.de"
//  nativeOutputDir = "build/jfx/native"
//  bundler = "windows.app"
//  // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
//  jvmProperties = null // Map<String, String>
//  jvmArgs = null // List<String>
//  userJvmArgs = null // Map<String, String>
//  launcherArguments = null // List<String>
//  nativeReleaseVersion = "0.0.1"
//  needShortcut = false
//  needMenu = false
//  bundleArguments = [
//    // dont bundle JRE (not recommended, but increases build-size/-speed)
//    runtime: null
//  ]
//  appName = "archerytime-display"
//  // this is used for files below "src/main/deploy", e.g. "src/main/deploy/windows/project.ico"
//  additionalBundlerResources = null
//  // path to some additional resources for the bundlers when creating application-bundle
//  additionalAppResources = "src/main/generated"
//  // path to some additional resources when creating application-bundle
////  secondaryLaunchers = [[appName: "somethingDifferent"], [appName: "somethingDifferent2"]]
//  fileAssociations = null // List<Map<String, Object>>
//  noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing
//  customBundlers = null // List<String>
//  failOnError = false
//  onlyCustomBundlers = false
//  skipJNLP = false
//  skipNativeVersionNumberSanitizing = false // anything than numbers or dots are removed
//  additionalJarsignerParameters = null // List<String>
//  skipMainClassScanning = false // set to true might increase build-speed
//
//  skipNativeLauncherWorkaround124 = false
//  skipNativeLauncherWorkaround167 = false
//  skipNativeLauncherWorkaround205 = false
//  skipJNLPRessourcePathWorkaround182 = false
//  skipSigningJarFilesJNLP185 = false
//  skipSizeRecalculationForJNLP185 = false
//  skipMacBundlerWorkaround = false
//
//  // gradle jfxRun
//  runJavaParameter = null // String
//  runAppParameter = null // String
//
//  // per default the outcome of the gradle "jarTask" will be used, set this to specify otherwise (like proguard-output)
//  alternativePathToJarFile = null // String
//
//  // to disable patching of ant-javafx.jar, set this to false
//  usePatchedJFXAntLib = true
//
//  // making it able to support absolute paths, defaults to "false" for maintaining old behaviour
//  checkForAbsolutePaths = false
//
//  // gradle jfxGenerateKeyStore
//  keyStore = "src/main/deploy/keystore.jks"
//  keyStoreAlias = "myalias"
//  keyStorePassword = "password"
//  keyPassword = null // will default to keyStorePassword
//  keyStoreType = "jks"
//  overwriteKeyStore = false
//
//  certDomain = null // required
//  certOrgUnit = null // defaults to "none"
//  certOrg = null // required
//  certState = null // required
//  certCountry = null // required
//
}
